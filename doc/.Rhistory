m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =12)
m
data <- read.csv('/Users/yanzhuchen/Desktop/processed_data.csv')
data<-data[1:100,]
data <- na.omit(data, cols = c("Longitude", "Latitude"))
data <- data[data$CaseType == "Comprehensive",]
m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =12) %>%
addCircleMarkers(lng = data$Longitude, lat = data$Latitude, radius = 2, color = "red", label = ~paste0("BuildindID: ", BuildingID, "<br/","House#: ", HouseNumber))
m
runApp('~/Desktop/tab1')
m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =4) %>%
addCircleMarkers(lng = data$Longitude, lat = data$Latitude, radius = 2, color = "red", label = ~paste0("BuildindID: ", BuildingID, "<br/","House#: ", HouseNumber))
m
m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =8) %>%
addCircleMarkers(lng = data$Longitude, lat = data$Latitude, radius = 2, color = "red", label = ~paste0("BuildindID: ", BuildingID, "<br/","House#: ", HouseNumber))
m
m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =10) %>%
addCircleMarkers(lng = data$Longitude, lat = data$Latitude, radius = 2, color = "red", label = ~paste0("BuildindID: ", BuildingID, "<br/","House#: ", HouseNumber))
m
data <- read.csv('/Users/yanzhuchen/Desktop/processed_data.csv')
data <- na.omit(data, cols = c("Longitude", "Latitude"))
mean(data$Latitude)
mean(data$Longitude)
runApp('~/Desktop/tab1')
runApp('~/Desktop/tab1')
m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =10) %>%
addCircleMarkers(lng = data$Longitude, lat = data$Latitude, radius = 0.5, color = "red", label = ~paste0("BuildindID: ", BuildingID, "<br/","House#: ", HouseNumber))
m
1:5
head(Data)
head(data)
data1<- data
data <- data1["CaseType"=="Comprehensive",]
pal <- colorFactor(palette = c("red","blue","green","orange","pruple",
levels = 1:5))
pal <- colorQuantile(palette = c("red","blue","green","orange","pruple",
n=5))
pal <- colorNumeric(palette = c("red","blue","green","orange","pruple"), domain = data$Boro)
pal <- colorNumeric(palette = c("red","blue","green","orange","purple"), domain = data$Boro)
m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =10) %>%
addCircleMarkers(lng = data$Longitude, lat = data$Latitude, radius = 0.5, color = ~pal(Boro), label = ~paste0("BuildindID: ", BuildingID, "<br/>","House#: ", HouseNumber))
})
m <- leaflet( data ) %>%
addProviderTiles("CartoDB") %>%
setView(lng=-73.98928, lat = 40.75042 , zoom =10) %>%
addCircleMarkers(lng = data$Longitude, lat = data$Latitude, radius = 0.5, color = ~pal(Boro), label = ~paste0("BuildindID: ", BuildingID, "<br/>","House#: ", HouseNumber))
m
case_type <- c("Comprehensive",
"Heat and Hot Water",
"Access Warrant - Non-Lead",
"Tenant Action",
"False Certification Non-Lead",
"Heat Supplemental Cases",
"Tenant Action/Harrassment",
"CONH",
"Access Warrant - lead",
"Comp Supplemental Cases",
"Lead False Certification",
"Failure to Register Only",
"7A",
"HLD - Other Case Type")
data1<-read.csv("~/Desktop/Project2-ShinyApp/Part1/data/processed_data.csv")
case_type <- c("Comprehensive",
"Heat and Hot Water",
"Access Warrant - Non-Lead",
"Tenant Action",
"False Certification Non-Lead",
"Heat Supplemental Cases",
"Tenant Action/Harrassment",
"CONH",
"Access Warrant - lead",
"Comp Supplemental Cases",
"Lead False Certification",
"Failure to Register Only",
"7A",
"HLD - Other Case Type")
data1<-read.csv("/Users/yanzhuchen/Documents/GitHub/fall2019-proj2--sec2-grp3/data/processed_data.csv")
under <- readOGR("~/Desktop/ZIP_CODE_040114/ZIP_CODE_040114.shp")
library(rgdal)
library(leaflet)
library(shiny)
library(dplyr)
library(raster)
library(tigris)
library(sp)
library(ggmap)
library(maptools)
library(broom)
library(httr)
case_type <- c("Comprehensive",
"Heat and Hot Water",
"Access Warrant - Non-Lead",
"Tenant Action",
"False Certification Non-Lead",
"Heat Supplemental Cases",
"Tenant Action/Harrassment",
"CONH",
"Access Warrant - lead",
"Comp Supplemental Cases",
"Lead False Certification",
"Failure to Register Only",
"7A",
"HLD - Other Case Type")
data1<-read.csv("/Users/yanzhuchen/Documents/GitHub/fall2019-proj2--sec2-grp3/data/processed_data.csv")
under <- readOGR("~/Desktop/ZIP_CODE_040114/ZIP_CODE_040114.shp")
ui <- fluidPage(
h1("Map of Frequences"),
sidebarLayout(
sidebarPanel(
selectInput("Zip_frequence", "Case:", case_type
)
),
mainPanel(
leafletOutput("mymap",height = 1000)
)
)
)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[which(data1$CaseType==input$Zip_frequence),]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(100)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 12)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
# Run the app ----
shinyApp(ui = ui, server = server)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[which(data1$CaseType==input$Zip_frequence),]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(100)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -80.98928, lat = 40.75042, zoom = 10)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
# Run the app ----
shinyApp(ui = ui, server = server)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[which(data1$CaseType==input$Zip_frequence),]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(100)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
# Run the app ----
shinyApp(ui = ui, server = server)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[which(data1$CaseType==input$Zip_frequence),]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(100)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
# Run the app ----
shinyApp(ui = ui, server = server)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[which(data1$CaseType==input$Zip_frequence),]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(100)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(dplyr)
datasliced<-data1[which(data1$CaseType==input$Zip_frequence),]
datasliced<-data1[which(data1$CaseType== "Comprehensive"),]
head(datasliced)
datasliced<-datasliced[datasliced$CaseStatus=="CLOSED", ]
head(datasliced)
ZIPCODE<-names(table(datasliced$Zip))
head(ZIPCODE)
frequence<-unname(table(datasliced$Zip))
head(frequence)
table(datasliced$Zip)
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
Zip
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
head(under2@data)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(100)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence)
)
bins <- c(200)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))
case_type <- c("Comprehensive",
"Heat and Hot Water",
"Access Warrant - Non-Lead",
"Tenant Action",
"False Certification Non-Lead",
"Heat Supplemental Cases",
"Tenant Action/Harrassment",
"CONH",
"Access Warrant - lead",
"Comp Supplemental Cases",
"Lead False Certification",
"Failure to Register Only",
"7A",
"HLD - Other Case Type")
status_type <- c("APPLICATION" = "APPLICATION",
"CLOSED" = "CLOSED",
"DENIED" = "DENIED",
"Exempt" = "GRANTED",
"PENDING" = "PENDING",
"Rejected" = "Rejected",
"Rescinded" = "Rescinded",
"Settlement" = "Settlement",
"WithDrawn/Abandoned" = "WithDrawn/Abandoned")
data1<-read.csv("../data/processed_data.csv")
under <- readOGR("../data/ZIP_CODE_040114.shp")
ui <- fluidPage(
h1("Map of Frequences"),
sidebarLayout(
sidebarPanel(
selectInput("Zip_frequence", "Case:", case_type
),
selectInput("status_frequence", "Status:",status_type )
),
mainPanel(
leafletOutput("mymap",height = 1000)
)
)
)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[data1$CaseType==input$Zip_frequence,]
datasliced<-datasliced[datasliced$CaseStatus==input$status_frequence, ]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(200)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
# Run the app ----
shinyApp(ui = ui, server = server)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[data1$CaseType==input$Zip_frequence,]
datasliced<-datasliced[datasliced$CaseStatus==input$status_frequence, ]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
bins <- c(200)
pal <- colorBin("Blues", domain = subdat1$frequence, bins = bins)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[data1$CaseType==input$Zip_frequence,]
datasliced<-datasliced[datasliced$CaseStatus==input$status_frequence, ]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
pal <- colorNumeric(palette = "magma", domain = subdat1@data$frequence)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
pal <- colorNumeric(palette = "magma", domain = subdat1@data$frequence)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))
m
library(rgdal)
library(leaflet)
library(shiny)
library(dplyr)
library(raster)
library(tigris)
library(sp)
library(ggmap)
library(maptools)
library(broom)
library(httr)
case_type <- c("Comprehensive",
"Heat and Hot Water",
"Access Warrant - Non-Lead",
"Tenant Action",
"False Certification Non-Lead",
"Heat Supplemental Cases",
"Tenant Action/Harrassment",
"CONH",
"Access Warrant - lead",
"Comp Supplemental Cases",
"Lead False Certification",
"Failure to Register Only",
"7A",
"HLD - Other Case Type")
status_type <- c("APPLICATION" = "APPLICATION",
"CLOSED" = "CLOSED",
"DENIED" = "DENIED",
"Exempt" = "GRANTED",
"PENDING" = "PENDING",
"Rejected" = "Rejected",
"Rescinded" = "Rescinded",
"Settlement" = "Settlement",
"WithDrawn/Abandoned" = "WithDrawn/Abandoned")
data1<-read.csv("../data/processed_data.csv")
under <- readOGR("../data/ZIP_CODE_040114.shp")
ui <- fluidPage(
h1("Map of Frequences"),
sidebarLayout(
sidebarPanel(
selectInput("Zip_frequence", "Case:", case_type
),
selectInput("status_frequence", "Status:",status_type )
),
mainPanel(
leafletOutput("mymap",height = 1000)
)
)
)
server=function(input, output) {
output$mymap <- renderLeaflet({
datasliced<-data1[data1$CaseType==input$Zip_frequence,]
datasliced<-datasliced[datasliced$CaseStatus==input$status_frequence, ]
ZIPCODE<-names(table(datasliced$Zip))
frequence<-unname(table(datasliced$Zip))
Zip<-as.data.frame(cbind(ZIPCODE,frequence))
#Zip <- Zip[-c(43,58,178),]
under1 <- subset(under, is.element(Zip$ZIPCODE, under$ZIPCODE))
under2 <- subset(under1, is.element(under1$ZIPCODE, Zip$ZIPCODE))
#under@data$POPULATION = rep(0,180)
under2@data = merge(x=under2@data, y=Zip, by = "ZIPCODE", all.x = TRUE)
subdat1 <- spTransform(under2, CRS("+init=epsg:4326"))
subdat1@data$frequence <- as.numeric(subdat1@data$frequence)
pal <- colorNumeric(palette = "magma", domain = subdat1@data$frequence)
m <- leaflet(under) %>%
addProviderTiles(providers$Stamen.Toner) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 11)%>%
addPolygons(data = subdat1,
weight = 1,
smoothFactor = 0.5,
color = "white",
fillOpacity = 0.8,
fillColor = pal(subdat1$frequence))})
}
# Run the app ----
shinyApp(ui = ui, server = server)
